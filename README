An OpenCL wrapper class and a SCons build library to simplify integration 
of OpenCL code in C++, C, Fortran and Perl

(c) Wim Vanderbauwhede 2010-2013

OclWrapper: and OpenCL wrapper class in C++
OclBuilder.py: a SCons builder for OpenCL applications using OclWrapper
ocl_env.sh: environment variables used by OclBuilder.py (bash syntax)

To use the OclWrapper and OclBuilder, all you need to do is:

- put the environment variables in your .bashrc or .profile or equivalent

- In your SConstruct file:

    from OclBuilder import initOcl

    # Define your Environment as required for your build

    # Initialise OpenCL-specific env values
    env = initOcl(env)

    # Rest of your build as usual

For a simple build, you can also do

    from OclBuilder import build

    appname='matmult_int'

    # Any additional sources
    sources=[appname+'.cc']

    build(appname,sources)

If you use Make or another build system, then just build the OclWrapper library with SCons and
use it in your build script. For example, to integrate OpenCL into Fortran, your SConscript looks 
like this:

	from OclBuilder import initOcl

	envF=Environment(useF=1)
	envF=initOcl(envF)

and in your Makefile, add the following:

OCLINTDIR = $(OPENCL_DIR)/OpenCLIntegration	
OCL_OBJS = oclWrapper.o
OCL_LDFLAGS =  -L../opencl_wrapper -L$(OCLINTDIR) \
               -lOclWrapperF -lstdc++ -lOclWrapper -lOpenCL


- In  your C++ code:

  #include "OclWrapper.h"

  // Create a wrapper object

  OclWrapper ocl(...); // see code for constructor args

  ocl.makeReadBuffer(...);
  ocl.makeWriteBuffer(...);
  
  ocl.writeBuffer(...);
  ocl.enqueueNDRange(cl::NDRange(...), cl::NDRange(...));
  ocl.runKernel( ... ).wait();
  ocl.readBuffer(...);
  // There are many more options, see OclWrapper.h code

- In your Fortran code:

  use oclWrapper

  oclMakeReadBuffer(...);
  oclMakeWriteBuffer(...);
  
  oclWriteBuffer(...);
  runOcl(globalrange, localrange)
  oclReadBuffer(...)
  ! There are  many more options, see oclWrapper.f code


